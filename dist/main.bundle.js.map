{"version":3,"sources":["/Volumes/USBRAID/git/typescriptcollectionsframework-Demo-For-Angular5/src/$_lazy_route_resource lazy","/Volumes/USBRAID/git/typescriptcollectionsframework-Demo-For-Angular5/src/app/app.component.css","/Volumes/USBRAID/git/typescriptcollectionsframework-Demo-For-Angular5/src/app/app.component.html","/Volumes/USBRAID/git/typescriptcollectionsframework-Demo-For-Angular5/src/app/app.component.ts","/Volumes/USBRAID/git/typescriptcollectionsframework-Demo-For-Angular5/src/app/app.module.ts","/Volumes/USBRAID/git/typescriptcollectionsframework-Demo-For-Angular5/src/environments/environment.ts","/Volumes/USBRAID/git/typescriptcollectionsframework-Demo-For-Angular5/src/main.ts","/Volumes/USBRAID/git/typescriptcollectionsframework-Demo-For-Angular5/src/polyfills.ts"],"names":[],"mappings":"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","file":"main.bundle.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncatched exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"../../../../../src/$$_lazy_route_resource lazy recursive\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Volumes/USBRAID/git/typescriptcollectionsframework-Demo-For-Angular5/src/$$_lazy_route_resource lazy\n// module id = ../../../../../src/$$_lazy_route_resource lazy recursive\n// module chunks = main","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Volumes/USBRAID/git/typescriptcollectionsframework-Demo-For-Angular5/src/app/app.component.css\n// module id = ../../../../../src/app/app.component.css\n// module chunks = main","module.exports = \"<img src=\\\"https://larrydiamond.github.io/typescriptcollectionsframework/tsf-blue.png\\\" width=\\\"100\\\" height=\\\"100\\\"><br>\\n\\n<table>\\n  <tr>\\n    <td>ArrayList</td>\\n    <td><a href=\\\"#\\\" (click)=\\\"ArrayList()\\\">string</a>&nbsp;</td>\\n    <td><a href=\\\"#\\\" (click)=\\\"ArrayListAllFields()\\\">PetStoreProduct compare all fields</a>&nbsp;</td>\\n    <td><a href=\\\"#\\\" (click)=\\\"ArrayListOneField()\\\">PetStoreProduct compare one field</a>&nbsp;</td>\\n  </tr>\\n  <tr>\\n    <td>LinkedList</td>\\n    <td><a href=\\\"#\\\" (click)=\\\"LinkedList()\\\">string</a>&nbsp;</td>\\n    <td><a href=\\\"#\\\" (click)=\\\"LinkedListAllFields()\\\">PetStoreProduct compare all fields</a>&nbsp;</td>\\n    <td><a href=\\\"#\\\" (click)=\\\"LinkedListOneField()\\\">PetStoreProduct compare one field</a>&nbsp;</td>\\n  </tr>\\n  <tr>\\n    <td>HashSet</td>\\n    <td><a href=\\\"#\\\" (click)=\\\"HashSet()\\\">string</a>&nbsp;</td>\\n    <td><a href=\\\"#\\\" (click)=\\\"HashSetAllFields()\\\">PetStoreProduct compare all fields</a>&nbsp;</td>\\n    <td><a href=\\\"#\\\" (click)=\\\"HashSetOneField()\\\">PetStoreProduct compare one field</a>&nbsp;</td>\\n  </tr>\\n  <tr>\\n    <td>SkipListSet</td>\\n    <td><a href=\\\"#\\\" (click)=\\\"SkipListSet()\\\">string</a>&nbsp;</td>\\n    <td><a href=\\\"#\\\" (click)=\\\"SkipListSetAllFields()\\\">PetStoreProduct compare all fields</a>&nbsp;</td>\\n    <td><a href=\\\"#\\\" (click)=\\\"SkipListSetOneField()\\\">PetStoreProduct compare one field</a>&nbsp;</td>\\n  </tr>\\n  <tr>\\n    <td>TreeSet</td>\\n    <td><a href=\\\"#\\\" (click)=\\\"TreeSet()\\\">string</a>&nbsp;</td>\\n    <td><a href=\\\"#\\\" (click)=\\\"TreeSetAllFields()\\\">PetStoreProduct compare all fields</a>&nbsp;</td>\\n    <td><a href=\\\"#\\\" (click)=\\\"TreeSetOneField()\\\">PetStoreProduct compare one field</a>&nbsp;</td>\\n  </tr>\\n  <tr>\\n    <td>HashMap</td>\\n    <td><a href=\\\"#\\\" (click)=\\\"HashMap()\\\">string, string</a>&nbsp;</td>\\n    <td colspan=2>&nbsp; Very similar to the HashSet examples..... you'll see :) &nbsp;</td>\\n  </tr>\\n  <tr>\\n    <td>SkipListMap</td>\\n    <td><a href=\\\"#\\\" (click)=\\\"SkipListMap()\\\">string, string</a>&nbsp;</td>\\n    <td colspan=2>&nbsp; Very similar to the SkipListSet examples..... you'll see :) &nbsp;</td>\\n  </tr>\\n  <tr>\\n    <td>TreeMap</td>\\n    <td><a href=\\\"#\\\" (click)=\\\"TreeMap()\\\">string, string</a>&nbsp;</td>\\n    <td colspan=2>&nbsp; Very similar to the TreeSet examples..... you'll see :) &nbsp;</td>\\n  </tr>\\n</table>\\n<br>\\nSource code for this app is located at <a href=\\\"https://github.com/larrydiamond/typescriptcollectionsframework-Demo-For-Angular5\\\">https://github.com/larrydiamond/typescriptcollectionsframework-Demo-For-Angular5</a>\\n<br>\\n\\n<p *ngIf=\\\"active=='ArrayList'\\\">\\n  ArrayList compare on a string:<br>\\n  <li *ngFor=\\\"let str of alData\\\"><button (click)=\\\"removeArrayListEntry(str);\\\">{{str}}</button></li>\\n  <br>\\n  <input #aladd type=text placeholder=\\\"add\\\">\\n  <button (click)=\\\"addArrayList(aladd.value);aladd.value=''\\\">Add</button>\\n\\n  <br>  <br>  <br>  <br>\\n  An ArrayList is a List backed by a resizeable array.   Items added to an ArrayList will be added at the end of the ArrayList.<br>\\n  Click on an item to remove it from the ArrayList or enter a value and click Add to add it to the ArrayList.<br><br>\\n  <a href=\\\"https://larrydiamond.github.io/typescriptcollectionsframework/typedoc/classes/_arraylist_.arraylist.html\\\">ArrayList Documentation</a><br><br>\\n\\n  alData:ArrayList&lt;string> = new ArrayList&lt;string>(new AllFieldCollectable&lt;string>());<br>\\n  this.alData.add (\\\"Cat\\\");<br>\\n  this.alData.add (\\\"Squirrel\\\");<br>\\n  this.alData.add (\\\"Dog\\\");<br>\\n  this.alData.remove (\\\"OtherElement\\\");<br>\\n  for (let iter:JIterator&lt;string> = this.alData.iterator(); iter.hasNext(); ) &#123; <br>\\n    &nbsp;&nbsp;let ostr:string = iter.next();<br>\\n    &nbsp;&nbsp;console.log (ostr);<br>\\n  &#125;<br>\\n  <br>\\n  How to iterate over an Arraylist in the HTML template for an Angular Component:<br>\\n  &lt;li *ngFor=\\\"let str of alData\\\">&lt;button (click)=\\\"removeArrayListEntry(str);\\\">&#123;&#123;str&#125;&#125;&lt;/button>&lt;/li>\\n\\n</p>\\n\\n<p *ngIf=\\\"active=='LinkedList'\\\">\\n  LinkedList compare on a string:<br>\\n  <li *ngFor=\\\"let str of llData\\\"><button (click)=\\\"removeLinkedListEntry(str);\\\">{{str}}</button></li>\\n  <br>\\n  <input #lladd type=text placeholder=\\\"add\\\">\\n  <button (click)=\\\"addLinkedList(lladd.value);lladd.value=''\\\">Add</button>\\n\\n  <br>  <br>  <br>  <br>\\n  A LinkedList is a List backed by a Doubly-linked list.   Items added to a LinkedList will be added at the end of the LinkedList.<br>\\n  Click on an item to remove it from the LinkedList or enter a value and click Add to add it to the LinkedList.<br><br>\\n  <a href=\\\"https://larrydiamond.github.io/typescriptcollectionsframework/typedoc/classes/_linkedlist_.linkedlist.html\\\">LinkedList Documentation</a><br><br>\\n\\n  llData:LinkedList&lt;string> = new LinkedList&lt;string>(new AllFieldCollectable&lt;string>());<br>\\n  this.llData.add (\\\"Cat\\\");<br>\\n  this.llData.add (\\\"Squirrel\\\");<br>\\n  this.llData.add (\\\"Dog\\\");<br>\\n  this.llData.remove (\\\"OtherElement\\\");<br>\\n  for (let iter:JIterator&lt;string> = this.llData.iterator(); iter.hasNext(); ) &#123; <br>\\n    &nbsp;&nbsp;let ostr:string = iter.next();<br>\\n    &nbsp;&nbsp;console.log (ostr);<br>\\n  &#125;<br>\\n  <br>\\n  How to iterate over a LinkedList in the HTML template for an Angular Component:<br>\\n  &lt;li *ngFor=\\\"let str of llData\\\">&lt;button (click)=\\\"removeLinkedListEntry(str);\\\">&#123;&#123;str&#125;&#125;&lt;/button>&lt;/li>\\n</p>\\n\\n<p *ngIf=\\\"active=='HashSet'\\\">\\n  HashSet compare on a string:<br>\\n  <li *ngFor=\\\"let str of hsData\\\"><button (click)=\\\"removeHashSetEntry(str);\\\">{{str}}</button></li>\\n  <br>\\n  <input #hsadd type=text placeholder=\\\"add\\\">\\n  <button (click)=\\\"addHashSet(hsadd.value);hsadd.value=''\\\">Add</button>\\n\\n  <br>  <br>  <br>  <br>\\n  A HashSet is a Set backed by a HashMap.   Duplicates are not permitted.   There are no guarantees as to the iteration order of the set.   Set order is not guaranteed to remain constant over time.<br>\\n  Click on an item to remove it from the HashSet or enter a value and click Add to add it to the HashSet.<br><br>\\n  <a href=\\\"https://larrydiamond.github.io/typescriptcollectionsframework/typedoc/classes/_hashset_.hashset.html\\\">HashSet Documentation</a><br><br>\\n\\n  hsData:HashSet&lt;string> = new HashSet&lt;string>(new AllFieldHashable&lt;string>());<br>\\n  this.hsData.add (\\\"Cat\\\");<br>\\n  this.hsData.add (\\\"Squirrel\\\");<br>\\n  this.hsData.add (\\\"Dog\\\");<br>\\n  this.hsData.remove (\\\"OtherElement\\\");<br>\\n  for (let iter:JIterator&lt;string> = this.hsData.iterator(); iter.hasNext(); ) &#123; <br>\\n    &nbsp;&nbsp;let ostr:string = iter.next();<br>\\n    &nbsp;&nbsp;console.log (ostr);<br>\\n  &#125;<br>\\n  <br>\\n  How to iterate over a HashSet in the HTML template for an Angular Component:<br>\\n  &lt;li *ngFor=\\\"let str of hsData\\\">&lt;button (click)=\\\"removeHashSetEntry(str);\\\">&#123;&#123;str&#125;&#125;&lt;/button>&lt;/li>\\n</p>\\n\\n<p *ngIf=\\\"active=='SkipListSet'\\\">\\n  SkipList compare using string Comparator<br>\\n  <li *ngFor=\\\"let str of slData\\\"><button (click)=\\\"removeSkipListSetEntry(str);\\\">{{str}}</button></li>\\n  <br>\\n  <input #sladd type=text placeholder=\\\"add\\\">\\n  <button (click)=\\\"addSkipListSet(sladd.value);sladd.value=''\\\">Add</button>\\n\\n  <br>  <br>  <br>  <br>\\n  A SkipListSet is a Set backed by a SkipListMap.  (TL;DR: Replace all TreeSet with SkipListSet they're faster <a href=\\\"https://en.wikipedia.org/wiki/Skip_list\\\">SkipList explanation</a>  ).  Duplicates are not permitted.   The order of the elements is based on the Comparator provided to it at construction.<br>\\n  Click on an item to remove it from the SkipListSet or enter a value and click Add to add it to the SkipListSet.<br><br>\\n  <a href=\\\"https://larrydiamond.github.io/typescriptcollectionsframework/typedoc/classes/_skiplist_.skiplistset.html\\\">SkipListSet Documentation</a><br><br>\\n\\n  slData:SkipListSet&lt;string> = new SkipListSet&lt;string>(Collections.getStringComparator());<br>\\n  this.slData.add (\\\"Cat\\\");<br>\\n  this.slData.add (\\\"Squirrel\\\");<br>\\n  this.slData.add (\\\"Dog\\\");<br>\\n  this.slData.remove (\\\"OtherElement\\\");<br>\\n  for (let iter:JIterator&lt;string> = this.slData.iterator(); iter.hasNext(); ) &#123; <br>\\n    &nbsp;&nbsp;let ostr:string = iter.next();<br>\\n    &nbsp;&nbsp;console.log (ostr);<br>\\n  &#125;<br>\\n  <br>\\n  How to iterate over a SkipListSet in the HTML template for an Angular Component:<br>\\n  &lt;li *ngFor=\\\"let str of slData\\\">&lt;button (click)=\\\"removeSkipListSetEntry(str);\\\">&#123;&#123;str&#125;&#125;&lt;/button>&lt;/li>\\n</p>\\n\\n<p *ngIf=\\\"active=='TreeSet'\\\">\\n  TreeSet compare using string Comparator<br>\\n  <li *ngFor=\\\"let str of tsData\\\"><button (click)=\\\"removeTreeSetEntry(str);\\\">{{str}}</button></li>\\n  <br>\\n  <input #tsadd type=text placeholder=\\\"add\\\">\\n  <button (click)=\\\"addTreeSet(tsadd.value);tsadd.value=''\\\">Add</button>\\n\\n  <br>  <br>  <br>  <br>\\n  A TreeSet is a Set backed by a TreeMap.   Duplicates are not permitted.   The order of the elements is based on the Comparator provided to it at construction.<br>\\n  Click on an item to remove it from the TreeSet or enter a value and click Add to add it to the TreeSet.<br><br>\\n  <a href=\\\"https://larrydiamond.github.io/typescriptcollectionsframework/typedoc/classes/_treeset_.treeset.html\\\">TreeSet Documentation</a><br><br>\\n\\n  tsData:TreeSet&lt;string> = new TreeSet&lt;string>(Collections.getStringComparator());<br>\\n  this.tsData.add (\\\"Cat\\\");<br>\\n  this.tsData.add (\\\"Squirrel\\\");<br>\\n  this.tsData.add (\\\"Dog\\\");<br>\\n  this.tsData.remove (\\\"OtherElement\\\");<br>\\n  for (let iter:JIterator&lt;string> = this.tsData.iterator(); iter.hasNext(); ) &#123; <br>\\n    &nbsp;&nbsp;let ostr:string = iter.next();<br>\\n    &nbsp;&nbsp;console.log (ostr);<br>\\n  &#125;<br>\\n  <br>\\n  How to iterate over a TreeSet in the HTML template for an Angular Component:<br>\\n  &lt;li *ngFor=\\\"let str of tsData\\\">&lt;button (click)=\\\"removeTreeSetEntry(str);\\\">&#123;&#123;str&#125;&#125;&lt;/button>&lt;/li>\\n</p>\\n\\n<p *ngIf=\\\"active=='ArrayListAllFields'\\\">\\n  ArrayList compare on all fields:<br>\\n  <li *ngFor=\\\"let psp of alAllData\\\"><button (click)=\\\"removeArrayListAllEntry(psp);\\\">{{psp.getSku()}} - {{psp.getName()}}</button></li>\\n  <br>\\n  <input #alalladdsku type=text placeholder=\\\"sku\\\">\\n  <input #alalladdname type=text placeholder=\\\"name\\\">\\n  <button (click)=\\\"addArrayListAll(alalladdsku.value, alalladdname.value);alalladdsku.value='';alalladdname.value=''\\\">Add</button>\\n\\n  <br>  <br>  <br>  <br>\\n  An ArrayList is a List backed by a resizeable array.   Items added to an ArrayList will be added at the end of the ArrayList.<br>\\n  Click on an item to remove it from the ArrayList or enter a sku and a name and click Add to add it to the ArrayList.<br><br>\\n  <a href=\\\"https://larrydiamond.github.io/typescriptcollectionsframework/typedoc/classes/_arraylist_.arraylist.html\\\">ArrayList Documentation</a><br><br>\\n\\n  alAllData:ArrayList&lt;PetStoreProduct> = new ArrayList&lt;PetStoreProduct>(new AllFieldCollectable&lt;PetStoreProduct>());<br>\\n  this.alAllData.add (new PetStoreProduct(\\\"ABCDE\\\", \\\"Bird Seed\\\"));<br>\\n  this.alAllData.add (new PetStoreProduct(\\\"FGHIJ\\\", \\\"Cat Food\\\"));<br>\\n  this.alAllData.add (new PetStoreProduct(\\\"KLMNO\\\", \\\"Dog Food\\\"));<br>\\n  this.alAllData.remove (new PetStoreProduct(\\\"ZZZZZ\\\", \\\"Not there anymore\\\"));<br>\\n  for (let iter:JIterator&lt;PetStoreProduct> = this.alAllData.iterator(); iter.hasNext(); ) &#123; <br>\\n    &nbsp;&nbsp;let psp:PetStoreProduct = iter.next();<br>\\n    &nbsp;&nbsp;console.log (psp.getSku() - psp.getName());<br>\\n  &#125;<br>\\n  <br>\\n  How to iterate over an Arraylist in the HTML template for an Angular Component:<br>\\n  &lt;li *ngFor=\\\"let pspa of alAllData\\\">&lt;button (click)=\\\"removeArrayListAllEntry(pspa);\\\">&#123;&#123;pspa.getSku() } } - &#123;&#123;pspa.getName() } } &lt;/button>&lt;/li>\\n\\n  <br>  <br>\\n  export class PetStoreProduct &#123; // note no methods were added to this class for the framework to support it<br>\\n    &nbsp;&nbsp;private sku:string;<br>\\n    &nbsp;&nbsp;public getSku():string &#123; return this.sku; }<br>\\n    &nbsp;&nbsp;public setSku(newsku:string) &#123; this.sku = newsku; }<br>\\n<br>\\n    &nbsp;&nbsp;private name:string;<br>\\n    &nbsp;&nbsp;public getName():string &#123; return this.name; }<br>\\n    &nbsp;&nbsp;public setName(newname:string) &#123; this.name = newname; }<br>\\n<br>\\n    &nbsp;&nbsp;constructor(isku:string, iname:string) &#123;<br>\\n    &nbsp;&nbsp;&nbsp;&nbsp;  this.sku = isku;<br>\\n    &nbsp;&nbsp;&nbsp;&nbsp;  this.name = iname;<br>\\n    &nbsp;&nbsp;}<br>\\n  }<br>\\n</p>\\n\\n\\n<p *ngIf=\\\"active=='LinkedListAllFields'\\\">\\n    LinkedList compare on all fields:<br>\\n    <li *ngFor=\\\"let psp of llAllData\\\"><button (click)=\\\"removeLinkedListAllEntry(psp);\\\">{{psp.getSku()}} - {{psp.getName()}}</button></li>\\n    <br>\\n    <input #llalladdsku type=text placeholder=\\\"sku\\\">\\n    <input #llalladdname type=text placeholder=\\\"name\\\">\\n    <button (click)=\\\"addLinkedListAll(llalladdsku.value, llalladdname.value);llalladdsku.value='';llalladdname.value=''\\\">Add</button>\\n\\n    <br>  <br>  <br>  <br>\\n    A LinkedList is a List backed by a Doubly-linked list.   Items added to a LinkedList will be added at the end of the LinkedList.<br>\\n    Click on an item to remove it from the LinkedList or enter a sku and a name and click Add to add it to the LinkedList.<br><br>\\n    <a href=\\\"https://larrydiamond.github.io/typescriptcollectionsframework/typedoc/classes/_linkedlist_.linkedlist.html\\\">LinkedList Documentation</a><br><br>\\n\\n    llAllData:LinkedList&lt;PetStoreProduct> = new LinkedList&lt;PetStoreProduct>(new AllFieldCollectable&lt;PetStoreProduct>());<br>\\n    this.llAllData.add (new PetStoreProduct(\\\"ABCDE\\\", \\\"Bird Seed\\\"));<br>\\n    this.llAllData.add (new PetStoreProduct(\\\"FGHIJ\\\", \\\"Cat Food\\\"));<br>\\n    this.llAllData.add (new PetStoreProduct(\\\"KLMNO\\\", \\\"Dog Food\\\"));<br>\\n    this.llAllData.remove (new PetStoreProduct(\\\"ZZZZZ\\\", \\\"Not there anymore\\\"));<br>\\n    for (let iter:JIterator&lt;PetStoreProduct> = this.llAllData.iterator(); iter.hasNext(); ) &#123; <br>\\n    &nbsp;&nbsp;let psp:PetStoreProduct = iter.next();<br>\\n    &nbsp;&nbsp;console.log (psp.getSku() - psp.getName());<br>\\n    &#125;<br>\\n    <br>\\n    How to iterate over an LinkedList in the HTML template for an Angular Component:<br>\\n    &lt;li *ngFor=\\\"let pspa of llAllData\\\">&lt;button (click)=\\\"removeLinkedListAllEntry(pspa);\\\">&#123;&#123;pspa.getSku() } } - &#123;&#123;pspa.getName() } } &lt;/button>&lt;/li>\\n\\n    <br>  <br>\\n    export class PetStoreProduct &#123; // note no methods were added to this class for the framework to support it<br>\\n      &nbsp;&nbsp;private sku:string;<br>\\n      &nbsp;&nbsp;public getSku():string &#123; return this.sku; }<br>\\n      &nbsp;&nbsp;public setSku(newsku:string) &#123; this.sku = newsku; }<br>\\n    <br>\\n      &nbsp;&nbsp;private name:string;<br>\\n      &nbsp;&nbsp;public getName():string &#123; return this.name; }<br>\\n      &nbsp;&nbsp;public setName(newname:string) &#123; this.name = newname; }<br>\\n    <br>\\n      &nbsp;&nbsp;constructor(isku:string, iname:string) &#123;<br>\\n      &nbsp;&nbsp;&nbsp;&nbsp;  this.sku = isku;<br>\\n      &nbsp;&nbsp;&nbsp;&nbsp;  this.name = iname;<br>\\n      &nbsp;&nbsp;}<br>\\n    }<br>\\n</p>\\n\\n<p *ngIf=\\\"active=='HashSetAllFields'\\\">\\n  HashSet compare on all fields:<br>\\n  <li *ngFor=\\\"let psp of hsAllData\\\"><button (click)=\\\"removeHashSetAllEntry(psp);\\\">{{psp.getSku()}} - {{psp.getName()}}</button></li>\\n  <br>\\n  <input #hsalladdsku type=text placeholder=\\\"sku\\\">\\n  <input #hsalladdname type=text placeholder=\\\"name\\\">\\n  <button (click)=\\\"addHashSetAll(hsalladdsku.value, hsalladdname.value);hsalladdsku.value='';hsalladdname.value=''\\\">Add</button>\\n\\n  <br>  <br>  <br>  <br>\\n  A HashSet is a Set backed by a HashMap.   Duplicates are not permitted.   There are no guarantees as to the iteration order of the set.   Set order is not guaranteed to remain constant over time.<br>\\n  Click on an item to remove it from the HashSet or enter a sku and a name and and click Add to add it to the HashSet.<br><br>\\n  <a href=\\\"https://larrydiamond.github.io/typescriptcollectionsframework/typedoc/classes/_hashset_.hashset.html\\\">HashSet Documentation</a><br><br>\\n\\n  hsAllData:HashSet&lt;PetStoreProduct> = new HashSet&lt;PetStoreProduct>(new AllFieldHashable&lt;PetStoreProduct>());<br>\\n  this.hsAllData.add (new PetStoreProduct(\\\"ABCDE\\\", \\\"Bird Seed\\\"));<br>\\n  this.hsAllData.add (new PetStoreProduct(\\\"FGHIJ\\\", \\\"Cat Food\\\"));<br>\\n  this.hsAllData.add (new PetStoreProduct(\\\"KLMNO\\\", \\\"Dog Food\\\"));<br>\\n  this.hsAllData.remove (new PetStoreProduct(\\\"ZZZZZ\\\", \\\"Not there anymore\\\"));<br>\\n  for (let iter:JIterator&lt;PetStoreProduct> = this.hsAllData.iterator(); iter.hasNext(); ) &#123; <br>\\n  &nbsp;&nbsp;let psp:PetStoreProduct = iter.next();<br>\\n  &nbsp;&nbsp;console.log (psp.getSku() - psp.getName());<br>\\n  &#125;<br>\\n  <br>\\n  How to iterate over an HashSet in the HTML template for an Angular Component:<br>\\n  &lt;li *ngFor=\\\"let pspa of hsAllData\\\">&lt;button (click)=\\\"removeHashSetAllEntry(pspa);\\\">&#123;&#123;pspa.getSku() } } - &#123;&#123;pspa.getName() } } &lt;/button>&lt;/li>\\n\\n  <br>  <br>\\n  export class PetStoreProduct &#123; // note no methods were added to this class for the framework to support it<br>\\n    &nbsp;&nbsp;private sku:string;<br>\\n    &nbsp;&nbsp;public getSku():string &#123; return this.sku; }<br>\\n    &nbsp;&nbsp;public setSku(newsku:string) &#123; this.sku = newsku; }<br>\\n  <br>\\n    &nbsp;&nbsp;private name:string;<br>\\n    &nbsp;&nbsp;public getName():string &#123; return this.name; }<br>\\n    &nbsp;&nbsp;public setName(newname:string) &#123; this.name = newname; }<br>\\n  <br>\\n    &nbsp;&nbsp;constructor(isku:string, iname:string) &#123;<br>\\n    &nbsp;&nbsp;&nbsp;&nbsp;  this.sku = isku;<br>\\n    &nbsp;&nbsp;&nbsp;&nbsp;  this.name = iname;<br>\\n    &nbsp;&nbsp;}<br>\\n  }<br>\\n</p>\\n\\n<p *ngIf=\\\"active=='SkipListSetAllFields'\\\">\\n  SkipListSet compare all on fields<br>\\n  <li *ngFor=\\\"let psp of slAllData\\\"><button (click)=\\\"removeSkipListSetAllEntry(psp);\\\">{{psp.getSku()}} - {{psp.getName()}}</button></li>\\n  <br>\\n  <input #slalladdsku type=text placeholder=\\\"sku\\\">\\n  <input #slalladdname type=text placeholder=\\\"name\\\">\\n  <button (click)=\\\"addSkipListSetAll(slalladdsku.value, slalladdname.value);slalladdsku.value='';slalladdname.value=''\\\">Add</button>\\n\\n  <br>  <br>  <br>  <br>\\n  A SkipListSet is a Set backed by a SkipListMap.  (TL;DR: Replace all TreeSet with SkipListSet they're faster <a href=\\\"https://en.wikipedia.org/wiki/Skip_list\\\">SkipList explanation</a>  ).  Duplicates are not permitted.   The order of the elements is based on the Comparator provided to it at construction.<br>\\n  Click on an item to remove it from the SkipListSet or enter a value and click Add to add it to the SkipListSet.<br><br>\\n  <a href=\\\"https://larrydiamond.github.io/typescriptcollectionsframework/typedoc/classes/_skiplist_.skiplistset.html\\\">SkipListSet Documentation</a><br><br>\\n\\n  slAllData:SkipListSet&lt;string> = new SkipListSet&lt;PetStoreProduct>(new PetStoreProductAllFieldsComparator());<br>\\n  this.slAllData.add (new PetStoreProduct(\\\"ABCDE\\\", \\\"Bird Seed\\\"));<br>\\n  this.slAllData.add (new PetStoreProduct(\\\"FGHIJ\\\", \\\"Cat Food\\\"));<br>\\n  this.slAllData.add (new PetStoreProduct(\\\"KLMNO\\\", \\\"Dog Food\\\"));<br>\\n  this.slAllData.remove (new PetStoreProduct(\\\"ZZZZZ\\\", \\\"Not there anymore\\\"));<br>\\n  for (let iter:JIterator&lt;PetStoreProduct> = this.slAllData.iterator(); iter.hasNext(); ) &#123; <br>\\n  &nbsp;&nbsp;let psp:PetStoreProduct = iter.next();<br>\\n  &nbsp;&nbsp;console.log (psp.getSku() - psp.getName());<br>\\n  &#125;<br>\\n  <br>\\n  How to iterate over a SkipListSet in the HTML template for an Angular Component:<br>\\n  &lt;li *ngFor=\\\"let pspa of slAllData\\\">&lt;button (click)=\\\"removeSkipListSetAllEntry(pspa);\\\">&#123;&#123;pspa.getSku() } } - &#123;&#123;pspa.getName() } } &lt;/button>&lt;/li><br>\\n<br>\\n  export class PetStoreProductAllFieldsComparator implements Comparator&lt;PetStoreProduct> &#123;<br>\\n  &nbsp;&nbsp;  compare(o1:PetStoreProduct, o2:PetStoreProduct) : number &#123;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;    if (o1 === o2)<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      return 0;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;      if (o1 === undefined)<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      return -1;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;    if (o1 === null)<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      return -1;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;    if (o2 === undefined)<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      return 1;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;    if (o2 === null)<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      return 1;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;    if (o1.getSku() < o2.getSku())<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      return -1;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;    if (o1.getSku() > o2.getSku())<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      return 1;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;    if (o1.getName() < o2.getName())<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      return -1;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;    return 1;<br>\\n  &nbsp;&nbsp;  }<br>\\n  }<br>\\n</p>\\n\\n<p *ngIf=\\\"active=='TreeSetAllFields'\\\">\\n  TreeSet compare all on fields<br>\\n  <li *ngFor=\\\"let psp of tsAllData\\\"><button (click)=\\\"removeTreeSetAllEntry(psp);\\\">{{psp.getSku()}} - {{psp.getName()}}</button></li>\\n  <br>\\n  <input #tsalladdsku type=text placeholder=\\\"sku\\\">\\n  <input #tsalladdname type=text placeholder=\\\"name\\\">\\n  <button (click)=\\\"addTreeSetAll(tsalladdsku.value, tsalladdname.value);tsalladdsku.value='';tsalladdname.value=''\\\">Add</button>\\n\\n  <br>  <br>  <br>  <br>\\n  A TreeSet is a Set backed by a TreeMap.   Duplicates are not permitted.   The order of the elements is based on the Comparator provided to it at construction.<br>\\n  Click on an item to remove it from the TreeSet or enter a value and click Add to add it to the TreeSet.<br><br>\\n  <a href=\\\"https://larrydiamond.github.io/typescriptcollectionsframework/typedoc/classes/_treeset_.treeset.html\\\">TreeSet Documentation</a><br><br>\\n\\n  tsAllData:TreeSet&lt;string> = new TreeSet&lt;PetStoreProduct>(new PetStoreProductAllFieldsComparator());<br>\\n  this.tsAllData.add (new PetStoreProduct(\\\"ABCDE\\\", \\\"Bird Seed\\\"));<br>\\n  this.tsAllData.add (new PetStoreProduct(\\\"FGHIJ\\\", \\\"Cat Food\\\"));<br>\\n  this.tsAllData.add (new PetStoreProduct(\\\"KLMNO\\\", \\\"Dog Food\\\"));<br>\\n  this.tsAllData.remove (new PetStoreProduct(\\\"ZZZZZ\\\", \\\"Not there anymore\\\"));<br>\\n  for (let iter:JIterator&lt;PetStoreProduct> = this.tsAllData.iterator(); iter.hasNext(); ) &#123; <br>\\n  &nbsp;&nbsp;let psp:PetStoreProduct = iter.next();<br>\\n  &nbsp;&nbsp;console.log (psp.getSku() - psp.getName());<br>\\n  &#125;<br>\\n  <br>\\n  How to iterate over a TreeSet in the HTML template for an Angular Component:<br>\\n  &lt;li *ngFor=\\\"let pspa of tsAllData\\\">&lt;button (click)=\\\"removeTreeSetAllEntry(pspa);\\\">&#123;&#123;pspa.getSku() } } - &#123;&#123;pspa.getName() } } &lt;/button>&lt;/li><br>\\n<br>\\n  export class PetStoreProductAllFieldsComparator implements Comparator&lt;PetStoreProduct> &#123;<br>\\n  &nbsp;&nbsp;  compare(o1:PetStoreProduct, o2:PetStoreProduct) : number &#123;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;    if (o1 === o2)<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      return 0;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;      if (o1 === undefined)<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      return -1;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;    if (o1 === null)<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      return -1;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;    if (o2 === undefined)<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      return 1;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;    if (o2 === null)<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      return 1;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;    if (o1.getSku() < o2.getSku())<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      return -1;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;    if (o1.getSku() > o2.getSku())<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      return 1;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;    if (o1.getName() < o2.getName())<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      return -1;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;    return 1;<br>\\n  &nbsp;&nbsp;  }<br>\\n  }<br>\\n</p>\\n\\n<p *ngIf=\\\"active=='ArrayListOneField'\\\">\\n  ArrayList compare on one field:<br>\\n  <li *ngFor=\\\"let psp of alOneData\\\"><button (click)=\\\"removeArrayListOneEntry(psp);\\\">{{psp.getSku()}} - {{psp.getName()}}</button></li>\\n  <br>\\n  <input #aloneaddsku type=text placeholder=\\\"sku\\\">\\n  <input #aloneaddname type=text placeholder=\\\"name\\\">\\n  <button (click)=\\\"addArrayListOne(aloneaddsku.value, aloneaddname.value);aloneaddsku.value='';aloneaddname.value=''\\\">Add</button>\\n\\n  <br>  <br>  <br>  <br>\\n  An ArrayList is a List backed by a resizeable array.   Items added to an ArrayList will be added at the end of the ArrayList.<br>\\n  Click on an item to remove it from the ArrayList or enter a sku and a name and click Add to add it to the ArrayList.<br><br>\\n  <a href=\\\"https://larrydiamond.github.io/typescriptcollectionsframework/typedoc/classes/_arraylist_.arraylist.html\\\">ArrayList Documentation</a><br><br>\\n\\n  alOneData:ArrayList&lt;PetStoreProduct> = new ArrayList&lt;PetStoreProduct>(new PetStoreProductSkuCollectable());<br>\\n  this.alOneData.add (new PetStoreProduct(\\\"ABCDE\\\", \\\"Bird Seed\\\"));<br>\\n  this.alOneData.add (new PetStoreProduct(\\\"FGHIJ\\\", \\\"Cat Food\\\"));<br>\\n  this.alOneData.add (new PetStoreProduct(\\\"KLMNO\\\", \\\"Dog Food\\\"));<br>\\n  this.alOneData.remove (new PetStoreProduct(\\\"ZZZZZ\\\", \\\"Not there anymore\\\"));<br>\\n  for (let iter:JIterator&lt;PetStoreProduct> = this.alOneData.iterator(); iter.hasNext(); ) &#123; <br>\\n    &nbsp;&nbsp;let psp:PetStoreProduct = iter.next();<br>\\n    &nbsp;&nbsp;console.log (psp.getSku() - psp.getName());<br>\\n  &#125;<br>\\n  <br>\\n  How to iterate over an Arraylist in the HTML template for an Angular Component:<br>\\n  &lt;li *ngFor=\\\"let pspa of alOneData\\\">&lt;button (click)=\\\"removeArrayListOneEntry(pspa);\\\">&#123;&#123;pspa.getSku() } } - &#123;&#123;pspa.getName() } } &lt;/button>&lt;/li>\\n\\n  <br>  <br>\\n  export class PetStoreProduct &#123; // note no methods were added to this class for the framework to support it<br>\\n    &nbsp;&nbsp;private sku:string;<br>\\n    &nbsp;&nbsp;public getSku():string &#123; return this.sku; }<br>\\n    &nbsp;&nbsp;public setSku(newsku:string) &#123; this.sku = newsku; }<br>\\n<br>\\n    &nbsp;&nbsp;private name:string;<br>\\n    &nbsp;&nbsp;public getName():string &#123; return this.name; }<br>\\n    &nbsp;&nbsp;public setName(newname:string) &#123; this.name = newname; }<br>\\n<br>\\n    &nbsp;&nbsp;constructor(isku:string, iname:string) &#123;<br>\\n    &nbsp;&nbsp;&nbsp;&nbsp;  this.sku = isku;<br>\\n    &nbsp;&nbsp;&nbsp;&nbsp;  this.name = iname;<br>\\n    &nbsp;&nbsp;}<br>\\n  }<br>\\n  <br>\\n  export class PetStoreProductSkuCollectable implements Collectable&lt;PetStoreProduct> &#123;<br>\\n  &nbsp;&nbsp;equals (instance1 : PetStoreProduct, instance2 : PetStoreProduct) : boolean &#123;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;if (instance1 === undefined) &#123;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (instance2 === undefined) &#123;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else &#123;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;}<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;    if (instance1 === null) &#123;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      if (instance2 === null) &#123;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        return true;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      } else &#123;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        return false;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      }<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;    }<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;    if ((instance2 === null) || (instance2 === undefined)) &#123;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      return false;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;    }<br>\\n<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;    if (instance1.getSku() === instance2.getSku()) &#123;  // what we're really comparing here<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      return true;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;    }<br>\\n<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;    return false;<br>\\n  &nbsp;&nbsp;  }<br>\\n  }<br>\\n\\n\\n</p>\\n\\n\\n<p *ngIf=\\\"active=='LinkedListOneField'\\\">\\n    LinkedList compare on one field:<br>\\n    <li *ngFor=\\\"let psp of llOneData\\\"><button (click)=\\\"removeLinkedListOneEntry(psp);\\\">{{psp.getSku()}} - {{psp.getName()}}</button></li>\\n    <br>\\n    <input #llOneaddsku type=text placeholder=\\\"sku\\\">\\n    <input #llOneaddname type=text placeholder=\\\"name\\\">\\n    <button (click)=\\\"addLinkedListOne(llOneaddsku.value, llOneaddname.value);llOneaddsku.value='';llOneaddname.value=''\\\">Add</button>\\n\\n    <br>  <br>  <br>  <br>\\n    A LinkedList is a List backed by a Doubly-linked list.   Items added to a LinkedList will be added at the end of the LinkedList.<br>\\n    Click on an item to remove it from the LinkedList or enter a sku and a name and click Add to add it to the LinkedList.<br><br>\\n    <a href=\\\"https://larrydiamond.github.io/typescriptcollectionsframework/typedoc/classes/_linkedlist_.linkedlist.html\\\">LinkedList Documentation</a><br><br>\\n\\n    llOneData:LinkedList&lt;PetStoreProduct> = new LinkedList&lt;PetStoreProduct>(new PetStoreProductSkuCollectable());<br>\\n    this.llOneData.add (new PetStoreProduct(\\\"ABCDE\\\", \\\"Bird Seed\\\"));<br>\\n    this.llOneData.add (new PetStoreProduct(\\\"FGHIJ\\\", \\\"Cat Food\\\"));<br>\\n    this.llOneData.add (new PetStoreProduct(\\\"KLMNO\\\", \\\"Dog Food\\\"));<br>\\n    this.llOneData.remove (new PetStoreProduct(\\\"ZZZZZ\\\", \\\"Not there anymore\\\"));<br>\\n    for (let iter:JIterator&lt;PetStoreProduct> = this.llOneData.iterator(); iter.hasNext(); ) &#123; <br>\\n    &nbsp;&nbsp;let psp:PetStoreProduct = iter.next();<br>\\n    &nbsp;&nbsp;console.log (psp.getSku() - psp.getName());<br>\\n    &#125;<br>\\n    <br>\\n    How to iterate over an LinkedList in the HTML template for an Angular Component:<br>\\n    &lt;li *ngFor=\\\"let pspa of llOneData\\\">&lt;button (click)=\\\"removeLinkedListOneEntry(pspa);\\\">&#123;&#123;pspa.getSku() } } - &#123;&#123;pspa.getName() } } &lt;/button>&lt;/li>\\n\\n    <br>  <br>\\n    export class PetStoreProduct &#123; // note no methods were added to this class for the framework to support it<br>\\n      &nbsp;&nbsp;private sku:string;<br>\\n      &nbsp;&nbsp;public getSku():string &#123; return this.sku; }<br>\\n      &nbsp;&nbsp;public setSku(newsku:string) &#123; this.sku = newsku; }<br>\\n    <br>\\n      &nbsp;&nbsp;private name:string;<br>\\n      &nbsp;&nbsp;public getName():string &#123; return this.name; }<br>\\n      &nbsp;&nbsp;public setName(newname:string) &#123; this.name = newname; }<br>\\n    <br>\\n      &nbsp;&nbsp;constructor(isku:string, iname:string) &#123;<br>\\n      &nbsp;&nbsp;&nbsp;&nbsp;  this.sku = isku;<br>\\n      &nbsp;&nbsp;&nbsp;&nbsp;  this.name = iname;<br>\\n      &nbsp;&nbsp;}<br>\\n    }<br>\\n    <br>\\n    export class PetStoreProductSkuCollectable implements Collectable&lt;PetStoreProduct> &#123;<br>\\n    &nbsp;&nbsp;equals (instance1 : PetStoreProduct, instance2 : PetStoreProduct) : boolean &#123;<br>\\n    &nbsp;&nbsp;&nbsp;&nbsp;if (instance1 === undefined) &#123;<br>\\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (instance2 === undefined) &#123;<br>\\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<br>\\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else &#123;<br>\\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;<br>\\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>\\n    &nbsp;&nbsp;&nbsp;&nbsp;}<br>\\n    &nbsp;&nbsp;&nbsp;&nbsp;    if (instance1 === null) &#123;<br>\\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      if (instance2 === null) &#123;<br>\\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        return true;<br>\\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      } else &#123;<br>\\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        return false;<br>\\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      }<br>\\n    &nbsp;&nbsp;&nbsp;&nbsp;    }<br>\\n    &nbsp;&nbsp;&nbsp;&nbsp;    if ((instance2 === null) || (instance2 === undefined)) &#123;<br>\\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      return false;<br>\\n    &nbsp;&nbsp;&nbsp;&nbsp;    }<br>\\n  <br>\\n    &nbsp;&nbsp;&nbsp;&nbsp;    if (instance1.getSku() === instance2.getSku()) &#123;  // what we're really comparing here<br>\\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      return true;<br>\\n    &nbsp;&nbsp;&nbsp;&nbsp;    }<br>\\n  <br>\\n    &nbsp;&nbsp;&nbsp;&nbsp;    return false;<br>\\n    &nbsp;&nbsp;  }<br>\\n    }<br>\\n</p>\\n\\n<p *ngIf=\\\"active=='HashSetOneField'\\\">\\n  HashSet compare on one field:<br>\\n  <li *ngFor=\\\"let psp of hsOneData\\\"><button (click)=\\\"removeHashSetOneEntry(psp);\\\">{{psp.getSku()}} - {{psp.getName()}}</button></li>\\n  <br>\\n  <input #hsOneaddsku type=text placeholder=\\\"sku\\\">\\n  <input #hsOneaddname type=text placeholder=\\\"name\\\">\\n  <button (click)=\\\"addHashSetOne(hsOneaddsku.value, hsOneaddname.value);hsOneaddsku.value='';hsOneaddname.value=''\\\">Add</button>\\n\\n  <br>  <br>  <br>  <br>\\n  A HashSet is a Set backed by a HashMap.   Duplicates are not permitted.   There are no guarantees as to the iteration order of the set.   Set order is not guaranteed to remain constant over time.<br>\\n  Click on an item to remove it from the HashSet or enter a sku and a name and and click Add to add it to the HashSet.<br><br>\\n  <a href=\\\"https://larrydiamond.github.io/typescriptcollectionsframework/typedoc/classes/_hashset_.hashset.html\\\">HashSet Documentation</a><br><br>\\n\\n  hsOneData:HashSet&lt;PetStoreProduct> = new HashSet&lt;PetStoreProduct>(new PetStoreProductSkuHashable());<br>\\n  this.hsOneData.add (new PetStoreProduct(\\\"ABCDE\\\", \\\"Bird Seed\\\"));<br>\\n  this.hsOneData.add (new PetStoreProduct(\\\"FGHIJ\\\", \\\"Cat Food\\\"));<br>\\n  this.hsOneData.add (new PetStoreProduct(\\\"KLMNO\\\", \\\"Dog Food\\\"));<br>\\n  this.hsOneData.remove (new PetStoreProduct(\\\"ZZZZZ\\\", \\\"Not there anymore\\\"));<br>\\n  for (let iter:JIterator&lt;PetStoreProduct> = this.hsOneData.iterator(); iter.hasNext(); ) &#123; <br>\\n  &nbsp;&nbsp;let psp:PetStoreProduct = iter.next();<br>\\n  &nbsp;&nbsp;console.log (psp.getSku() - psp.getName());<br>\\n  &#125;<br>\\n  <br>\\n  How to iterate over an HashSet in the HTML template for an Angular Component:<br>\\n  &lt;li *ngFor=\\\"let pspa of hsOneData\\\">&lt;button (click)=\\\"removeHashSetOneEntry(pspa);\\\">&#123;&#123;pspa.getSku() } } - &#123;&#123;pspa.getName() } } &lt;/button>&lt;/li>\\n\\n  <br>  <br>\\n  export class PetStoreProduct &#123; // note no methods were added to this class for the framework to support it<br>\\n    &nbsp;&nbsp;private sku:string;<br>\\n    &nbsp;&nbsp;public getSku():string &#123; return this.sku; }<br>\\n    &nbsp;&nbsp;public setSku(newsku:string) &#123; this.sku = newsku; }<br>\\n  <br>\\n    &nbsp;&nbsp;private name:string;<br>\\n    &nbsp;&nbsp;public getName():string &#123; return this.name; }<br>\\n    &nbsp;&nbsp;public setName(newname:string) &#123; this.name = newname; }<br>\\n  <br>\\n    &nbsp;&nbsp;constructor(isku:string, iname:string) &#123;<br>\\n    &nbsp;&nbsp;&nbsp;&nbsp;  this.sku = isku;<br>\\n    &nbsp;&nbsp;&nbsp;&nbsp;  this.name = iname;<br>\\n    &nbsp;&nbsp;}<br>\\n  }<br>\\n<br>\\n  export class PetStoreProductSkuHashable implements Hashable&lt;PetStoreProduct> &#123;<br>\\n  &nbsp;&nbsp;  equals (instance1 : PetStoreProduct, instance2 : PetStoreProduct) : boolean &#123;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;    if (instance1 === undefined) &#123;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      if (instance2 === undefined) &#123;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        return true;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      } else &#123;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        return false;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      }<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;    }<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;    if (instance1 === null) &#123;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      if (instance2 === null) &#123;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        return true;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      } else &#123;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        return false;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      }<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;    }<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;    if ((instance2 === null) || (instance2 === undefined)) &#123;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      return false;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;    }<br>\\n<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;    if (instance1.getSku() === instance2.getSku()) &#123;  // what we're really comparing here<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      return true;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;    }<br>\\n<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;    return false;<br>\\n  &nbsp;&nbsp;  };<br>\\n  &nbsp;&nbsp;  hashCode (o:PetStoreProduct) : number &#123;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;    if (o === undefined) &#123;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      return 0;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;    }<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;    if (o === null) &#123;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      return 0;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;    }<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;    return Collections.getHashCodeForString(o.getSku());<br>\\n  &nbsp;&nbsp;  };<br>\\n  }<br>\\n\\n</p>\\n\\n<p *ngIf=\\\"active=='TreeSetOneField'\\\">\\n  TreeSet compare all one field<br>\\n  <li *ngFor=\\\"let psp of tsOneData\\\"><button (click)=\\\"removeTreeSetOneEntry(psp);\\\">{{psp.getSku()}} - {{psp.getName()}}</button></li>\\n  <br>\\n  <input #tsoneaddsku type=text placeholder=\\\"sku\\\">\\n  <input #tsoneaddname type=text placeholder=\\\"name\\\">\\n  <button (click)=\\\"addTreeSetOne(tsoneaddsku.value, tsoneaddname.value);tsoneaddsku.value='';tsoneaddname.value=''\\\">Add</button>\\n\\n  <br>  <br>  <br>  <br>\\n  A TreeSet is a Set backed by a TreeMap.   Duplicates are not permitted.   The order of the elements is based on the Comparator provided to it at construction.<br>\\n  Click on an item to remove it from the TreeSet or enter a value and click Add to add it to the TreeSet.<br><br>\\n  <a href=\\\"https://larrydiamond.github.io/typescriptcollectionsframework/typedoc/classes/_treeset_.treeset.html\\\">TreeSet Documentation</a><br><br>\\n\\n  tsOneData:TreeSet&lt;string> = new TreeSet&lt;PetStoreProduct>(new PetStoreProductOneFieldComparator());<br>\\n  this.tsOneData.add (new PetStoreProduct(\\\"ABCDE\\\", \\\"Bird Seed\\\"));<br>\\n  this.tsOneData.add (new PetStoreProduct(\\\"FGHIJ\\\", \\\"Cat Food\\\"));<br>\\n  this.tsOneData.add (new PetStoreProduct(\\\"KLMNO\\\", \\\"Dog Food\\\"));<br>\\n  this.tsOneData.remove (new PetStoreProduct(\\\"ZZZZZ\\\", \\\"Not there anymore\\\"));<br>\\n  for (let iter:JIterator&lt;PetStoreProduct> = this.tsOneData.iterator(); iter.hasNext(); ) &#123; <br>\\n  &nbsp;&nbsp;let psp:PetStoreProduct = iter.next();<br>\\n  &nbsp;&nbsp;console.log (psp.getSku() - psp.getName());<br>\\n  &#125;<br>\\n  <br>\\n  How to iterate over a TreeSet in the HTML template for an Angular Component:<br>\\n  &lt;li *ngFor=\\\"let pspa of tsOneData\\\">&lt;button (click)=\\\"removeTreeSetOneEntry(pspa);\\\">&#123;&#123;pspa.getSku() } } - &#123;&#123;pspa.getName() } } &lt;/button>&lt;/li><br>\\n<br>\\n  export class PetStoreProductOneFieldComparator implements Comparator&lt;PetStoreProduct> &#123;<br>\\n  &nbsp;&nbsp;  compare(o1:PetStoreProduct, o2:PetStoreProduct) : number &#123;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;    if (o1 === o2)<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      return 0;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;      if (o1 === undefined)<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      return -1;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;    if (o1 === null)<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      return -1;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;    if (o2 === undefined)<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      return 1;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;    if (o2 === null)<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      return 1;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;    if (o1.getSku() < o2.getSku())<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      return -1;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;    return 1;<br>\\n  &nbsp;&nbsp;  }<br>\\n  }<br>\\n</p>\\n\\n<p *ngIf=\\\"active=='SkipListSetOneField'\\\">\\n  SkipListSet compare all one field<br>\\n  <li *ngFor=\\\"let psp of slOneData\\\"><button (click)=\\\"removeSkipListSetOneEntry(psp);\\\">{{psp.getSku()}} - {{psp.getName()}}</button></li>\\n  <br>\\n  <input #sloneaddsku type=text placeholder=\\\"sku\\\">\\n  <input #sloneaddname type=text placeholder=\\\"name\\\">\\n  <button (click)=\\\"addSkipListSetOne(sloneaddsku.value, sloneaddname.value);sloneaddsku.value='';sloneaddname.value=''\\\">Add</button>\\n\\n  <br>  <br>  <br>  <br>\\n  A SkipListSet is a Set backed by a SkipListMap.  (TL;DR: Replace all TreeSet with SkipListSet they're faster <a href=\\\"https://en.wikipedia.org/wiki/Skip_list\\\">SkipList explanation</a>  ).  Duplicates are not permitted.   The order of the elements is based on the Comparator provided to it at construction.<br>\\n  Click on an item to remove it from the SkipListSet or enter a value and click Add to add it to the SkipListSet.<br><br>\\n  <a href=\\\"https://larrydiamond.github.io/typescriptcollectionsframework/typedoc/classes/_skiplist_.skiplistset.html\\\">SkipListSet Documentation</a><br><br>\\n\\n  slOneData:SkipListSet&lt;string> = new SkipListSet&lt;PetStoreProduct>(new PetStoreProductOneFieldComparator());<br>\\n  this.slOneData.add (new PetStoreProduct(\\\"ABCDE\\\", \\\"Bird Seed\\\"));<br>\\n  this.slOneData.add (new PetStoreProduct(\\\"FGHIJ\\\", \\\"Cat Food\\\"));<br>\\n  this.slOneData.add (new PetStoreProduct(\\\"KLMNO\\\", \\\"Dog Food\\\"));<br>\\n  this.slOneData.remove (new PetStoreProduct(\\\"ZZZZZ\\\", \\\"Not there anymore\\\"));<br>\\n  for (let iter:JIterator&lt;PetStoreProduct> = this.slOneData.iterator(); iter.hasNext(); ) &#123; <br>\\n  &nbsp;&nbsp;let psp:PetStoreProduct = iter.next();<br>\\n  &nbsp;&nbsp;console.log (psp.getSku() - psp.getName());<br>\\n  &#125;<br>\\n  <br>\\n  How to iterate over a SkipListSet in the HTML template for an Angular Component:<br>\\n  &lt;li *ngFor=\\\"let pspa of slOneData\\\">&lt;button (click)=\\\"removeSkipListSetOneEntry(pspa);\\\">&#123;&#123;pspa.getSku() } } - &#123;&#123;pspa.getName() } } &lt;/button>&lt;/li><br>\\n<br>\\n  export class PetStoreProductOneFieldComparator implements Comparator&lt;PetStoreProduct> &#123;<br>\\n  &nbsp;&nbsp;  compare(o1:PetStoreProduct, o2:PetStoreProduct) : number &#123;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;    if (o1 === o2)<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      return 0;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;      if (o1 === undefined)<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      return -1;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;    if (o1 === null)<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      return -1;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;    if (o2 === undefined)<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      return 1;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;    if (o2 === null)<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      return 1;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;    if (o1.getSku() < o2.getSku())<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      return -1;<br>\\n  &nbsp;&nbsp;&nbsp;&nbsp;    return 1;<br>\\n  &nbsp;&nbsp;  }<br>\\n  }<br>\\n</p>\\n\\n<p *ngIf=\\\"active=='HashMap'\\\">\\n  HashMap compare on string, string:<br>\\n  <li *ngFor=\\\"let psp of hsMapData.entrySet()\\\"><button (click)=\\\"removeHashMapEntry(psp.getKey());\\\">{{psp.getKey()}} - {{psp.getValue()}}</button></li>\\n  <br>\\n  <input #hsmapsku type=text placeholder=\\\"key\\\">\\n  <input #hsmapname type=text placeholder=\\\"value\\\">\\n  <button (click)=\\\"putHashMap(hsmapsku.value, hsmapname.value);hsmapsku.value='';hsmapname.value=''\\\">Put</button>\\n\\n  <br>  <br>  <br>  <br>\\n  A HashMap is a Hash implementation of the JMap interface.   Duplicate keys are not permitted.   There are no guarantees as to the iteration order of the map.   Map order is not guaranteed to remain constant over time.<br>\\n  Click on an item to remove it from the HashMap or enter a key and a value and and click Put to add it to the HashMap.<br><br>\\n  <a href=\\\"https://larrydiamond.github.io/typescriptcollectionsframework/typedoc/classes/_hashmap_.hashmap.html\\\">HashMap Documentation</a><br><br>\\n\\n  hsMapData:HashMap&lt;string, string> = new HashMap&lt;string, string>(new AllFieldHashable&lt;string>());<br>\\n  this.hsMapData.add (\\\"ABCDE\\\", \\\"Bird Seed\\\");<br>\\n  this.hsMapData.add (\\\"FGHIJ\\\", \\\"Cat Food\\\");<br>\\n  this.hsMapData.add (\\\"KLMNO\\\", \\\"Dog Food\\\");<br>\\n  this.hsMapData.remove (\\\"ZZZZZ\\\", \\\"Not there anymore\\\");<br>\\n  for (let iter:JIterator&lt;MapEntry&lt;string, string> = this.hsMapData.entrySet().iterator(); iter.hasNext(); ) &#123; <br>\\n  &nbsp;&nbsp;let psp:MapEntry&lt;string, string> = iter.next();<br>\\n  &nbsp;&nbsp;console.log (psp.getKey() - psp.getEntry());<br>\\n  &#125;<br>\\n  <br>\\n  How to iterate over a HashMap in the HTML template for an Angular Component:<br>\\n  &lt;li *ngFor=\\\"let psp of hsMapData.entrySet()\\\">&lt;button (click)=\\\"removeHashMap(psp);\\\">&#123;&#123;psp.getKey() } } - &#123;&#123;psp.getValue() } } &lt;/button>&lt;/li>\\n\\n  <br>  <br>\\n  export class PetStoreProduct &#123; // note no methods were added to this class for the framework to support it<br>\\n    &nbsp;&nbsp;private sku:string;<br>\\n    &nbsp;&nbsp;public getSku():string &#123; return this.sku; }<br>\\n    &nbsp;&nbsp;public setSku(newsku:string) &#123; this.sku = newsku; }<br>\\n  <br>\\n    &nbsp;&nbsp;private name:string;<br>\\n    &nbsp;&nbsp;public getName():string &#123; return this.name; }<br>\\n    &nbsp;&nbsp;public setName(newname:string) &#123; this.name = newname; }<br>\\n  <br>\\n    &nbsp;&nbsp;constructor(isku:string, iname:string) &#123;<br>\\n    &nbsp;&nbsp;&nbsp;&nbsp;  this.sku = isku;<br>\\n    &nbsp;&nbsp;&nbsp;&nbsp;  this.name = iname;<br>\\n    &nbsp;&nbsp;}<br>\\n  }<br>\\n</p>\\n\\n<p *ngIf=\\\"active=='TreeMap'\\\">\\n  TreeMap compare on string, string:<br>\\n  <li *ngFor=\\\"let psp of tsMapData.entrySet()\\\"><button (click)=\\\"removeTreeMapEntry(psp.getKey());\\\">{{psp.getKey()}} - {{psp.getValue()}}</button></li>\\n  <br>\\n  <input #tsmapsku type=text placeholder=\\\"key\\\">\\n  <input #tsmapname type=text placeholder=\\\"value\\\">\\n  <button (click)=\\\"putTreeMap(tsmapsku.value, tsmapname.value);tsmapsku.value='';tsmapname.value=''\\\">Put</button>\\n\\n  <br>  <br>  <br>  <br>\\n  A TreeMap is a binary tree implementation of the JMap interface.   Duplicate keys are not permitted.   The order of the elements is based on the Comparator provided to it at construction.<br>\\n  Click on an item to remove it from the TreeMap or enter a key and a value and and click Put to add it to the TreeMap.<br><br>\\n  <a href=\\\"https://larrydiamond.github.io/typescriptcollectionsframework/typedoc/classes/_treemap_.treemap.html\\\">TreeMap Documentation</a><br><br>\\n\\n  tsMapData:TreeMap&lt;string, string> = new TreeMap&lt;string, string>(Collections.getStringComparator());<br>\\n  this.tsMapData.add (\\\"ABCDE\\\", \\\"Bird Seed\\\");<br>\\n  this.tsMapData.add (\\\"FGHIJ\\\", \\\"Cat Food\\\");<br>\\n  this.tsMapData.add (\\\"KLMNO\\\", \\\"Dog Food\\\");<br>\\n  this.tsMapData.remove (\\\"ZZZZZ\\\", \\\"Not there anymore\\\");<br>\\n  for (let iter:JIterator&lt;MapEntry&lt;string, string> = this.tsMapData.entrySet().iterator(); iter.hasNext(); ) &#123; <br>\\n  &nbsp;&nbsp;let psp:MapEntry&lt;string, string> = iter.next();<br>\\n  &nbsp;&nbsp;console.log (psp.getKey() - psp.getEntry());<br>\\n  &#125;<br>\\n  <br>\\n  How to iterate over a TreeMap in the HTML template for an Angular Component:<br>\\n  &lt;li *ngFor=\\\"let psp of tsMapData.entrySet()\\\">&lt;button (click)=\\\"removeTreeMap(psp);\\\">&#123;&#123;psp.getKey() } } - &#123;&#123;psp.getValue() } } &lt;/button>&lt;/li>\\n\\n  <br>  <br>\\n  export class PetStoreProduct &#123; // note no methods were added to this class for the framework to support it<br>\\n    &nbsp;&nbsp;private sku:string;<br>\\n    &nbsp;&nbsp;public getSku():string &#123; return this.sku; }<br>\\n    &nbsp;&nbsp;public setSku(newsku:string) &#123; this.sku = newsku; }<br>\\n  <br>\\n    &nbsp;&nbsp;private name:string;<br>\\n    &nbsp;&nbsp;public getName():string &#123; return this.name; }<br>\\n    &nbsp;&nbsp;public setName(newname:string) &#123; this.name = newname; }<br>\\n  <br>\\n    &nbsp;&nbsp;constructor(isku:string, iname:string) &#123;<br>\\n    &nbsp;&nbsp;&nbsp;&nbsp;  this.sku = isku;<br>\\n    &nbsp;&nbsp;&nbsp;&nbsp;  this.name = iname;<br>\\n    &nbsp;&nbsp;}<br>\\n  }<br>\\n</p>\\n\\n<p *ngIf=\\\"active=='SkipListMap'\\\">\\n  SkipListMap compare on string, string:<br>\\n  <li *ngFor=\\\"let psp of slMapData.entrySet()\\\"><button (click)=\\\"removeSkipListMapEntry(psp.getKey());\\\">{{psp.getKey()}} - {{psp.getValue()}}</button></li>\\n  <br>\\n  <input #slmapsku type=text placeholder=\\\"key\\\">\\n  <input #slmapname type=text placeholder=\\\"value\\\">\\n  <button (click)=\\\"putSkipListMap(slmapsku.value, slmapname.value);slmapsku.value='';slmapname.value=''\\\">Put</button>\\n\\n  <br>  <br>  <br>  <br>\\n  A SkipListMap is a SkipList implementation of the JMap interface.   (TL;DR: Replace all TreeMap with SkipListMap they're faster <a href=\\\"https://en.wikipedia.org/wiki/Skip_list\\\">SkipList explanation</a>  ).  Duplicate keys are not permitted.   The order of the elements is based on the Comparator provided to it at construction.<br>\\n  Click on an item to remove it from the SkipListMap or enter a key and a value and and click Put to add it to the SkipListMap.<br><br>\\n  <a href=\\\"https://larrydiamond.github.io/typescriptcollectionsframework/typedoc/classes/_skiplist_.skiplistmap.html\\\">SkipListMap Documentation</a><br><br>\\n\\n  slMapData:SkipListMap&lt;string, string> = new SkipListMap&lt;string, string>(Collections.getStringComparator());<br>\\n  this.slMapData.add (\\\"ABCDE\\\", \\\"Bird Seed\\\");<br>\\n  this.slMapData.add (\\\"FGHIJ\\\", \\\"Cat Food\\\");<br>\\n  this.slMapData.add (\\\"KLMNO\\\", \\\"Dog Food\\\");<br>\\n  this.slMapData.remove (\\\"ZZZZZ\\\", \\\"Not there anymore\\\");<br>\\n  for (let iter:JIterator&lt;MapEntry&lt;string, string> = this.slMapData.entrySet().iterator(); iter.hasNext(); ) &#123; <br>\\n  &nbsp;&nbsp;let psp:MapEntry&lt;string, string> = iter.next();<br>\\n  &nbsp;&nbsp;console.log (psp.getKey() - psp.getEntry());<br>\\n  &#125;<br>\\n  <br>\\n  How to iterate over a SkipListMap in the HTML template for an Angular Component:<br>\\n  &lt;li *ngFor=\\\"let psp of slMapData.entrySet()\\\">&lt;button (click)=\\\"removeSkipListMap(psp);\\\">&#123;&#123;psp.getKey() } } - &#123;&#123;psp.getValue() } } &lt;/button>&lt;/li>\\n\\n  <br>  <br>\\n  export class PetStoreProduct &#123; // note no methods were added to this class for the framework to support it<br>\\n    &nbsp;&nbsp;private sku:string;<br>\\n    &nbsp;&nbsp;public getSku():string &#123; return this.sku; }<br>\\n    &nbsp;&nbsp;public setSku(newsku:string) &#123; this.sku = newsku; }<br>\\n  <br>\\n    &nbsp;&nbsp;private name:string;<br>\\n    &nbsp;&nbsp;public getName():string &#123; return this.name; }<br>\\n    &nbsp;&nbsp;public setName(newname:string) &#123; this.name = newname; }<br>\\n  <br>\\n    &nbsp;&nbsp;constructor(isku:string, iname:string) &#123;<br>\\n    &nbsp;&nbsp;&nbsp;&nbsp;  this.sku = isku;<br>\\n    &nbsp;&nbsp;&nbsp;&nbsp;  this.name = iname;<br>\\n    &nbsp;&nbsp;}<br>\\n  }<br>\\n</p>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Volumes/USBRAID/git/typescriptcollectionsframework-Demo-For-Angular5/src/app/app.component.html\n// module id = ../../../../../src/app/app.component.html\n// module chunks = main","import { Component } from '@angular/core';\nimport { SkipListSet, SkipListMap, ArrayList, LinkedList, HashSet, TreeSet, HashMap, TreeMap, Hashable, AllFieldCollectable, Collectable, AllFieldHashable, Collections, Comparator, ImmutableCollection, JIterator } from 'typescriptcollectionsframework';\n\nexport class PetStoreProduct {\n  private readonly sku:string;\n  public getSku():string { return this.sku; }\n\n  private readonly name:string;\n  public getName():string { return this.name; }\n\n  constructor(isku:string, iname:string) {\n    this.sku = isku;\n    this.name = iname;\n  }\n}\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  public active:string = \"ArrayList\";\n\n  public alData:ArrayList<string> = new ArrayList<string>(new AllFieldCollectable<string>());\n  public llData:LinkedList<string> = new LinkedList<string>(new AllFieldCollectable<string>());\n  public hsData:HashSet<string> = new HashSet<string>(new AllFieldHashable<string>());\n  public tsData:TreeSet<string> = new TreeSet<string>(Collections.getStringComparator());\n  public slData:SkipListSet<string> = new SkipListSet<string>(Collections.getStringComparator());\n\n  public alAllData:ArrayList<PetStoreProduct> = new ArrayList<PetStoreProduct>(new AllFieldCollectable<PetStoreProduct>());\n  public llAllData:LinkedList<PetStoreProduct> = new LinkedList<PetStoreProduct>(new AllFieldCollectable<PetStoreProduct>());\n  public hsAllData:HashSet<PetStoreProduct> = new HashSet<PetStoreProduct>(new AllFieldHashable<PetStoreProduct>());\n  public tsAllData:TreeSet<PetStoreProduct> = new TreeSet<PetStoreProduct>(new PetStoreProductAllFieldsComparator());\n  public slAllData:SkipListSet<PetStoreProduct> = new SkipListSet<PetStoreProduct>(new PetStoreProductAllFieldsComparator());\n\n  public alOneData:ArrayList<PetStoreProduct> = new ArrayList<PetStoreProduct>(new PetStoreProductSkuCollectable());\n  public llOneData:LinkedList<PetStoreProduct> = new LinkedList<PetStoreProduct>(new PetStoreProductSkuCollectable());\n  public hsOneData:HashSet<PetStoreProduct> = new HashSet<PetStoreProduct>(new PetStoreProductSkuHashable());\n  public tsOneData:TreeSet<PetStoreProduct> = new TreeSet<PetStoreProduct>(new PetStoreProductSkuComparator());\n  public slOneData:SkipListSet<PetStoreProduct> = new SkipListSet<PetStoreProduct>(new PetStoreProductSkuComparator());\n\n  public hsMapData:HashMap<string, string> = new HashMap<string, string>(new AllFieldHashable<string>());\n  public tsMapData:TreeMap<string, string> = new TreeMap<string, string>(Collections.getStringComparator());\n  public slMapData:SkipListMap<string, string> = new SkipListMap<string, string>(Collections.getStringComparator());\n\n  constructor () {\n    this.alData.add (\"Cat\");\n    this.alData.add (\"Squirrel\");\n    this.alData.add (\"Dog\");\n\n    this.llData.add (\"Cat\");\n    this.llData.add (\"Squirrel\");\n    this.llData.add (\"Dog\");\n\n    this.hsData.add (\"Cat\");\n    this.hsData.add (\"Squirrel\");\n    this.hsData.add (\"Dog\");\n\n    this.tsData.add (\"Cat\");\n    this.tsData.add (\"Squirrel\");\n    this.tsData.add (\"Dog\");\n\n    this.slData.add (\"Cat\");\n    this.slData.add (\"Squirrel\");\n    this.slData.add (\"Dog\");\n\n    let psp1:PetStoreProduct = new PetStoreProduct(\"ABCDE\", \"Bird Seed\");\n    let psp2:PetStoreProduct = new PetStoreProduct(\"FGHIJ\", \"Cat Food\");\n    let psp3:PetStoreProduct = new PetStoreProduct(\"KLMNO\", \"Dog Food\");\n\n    this.alAllData.add (psp1);\n    this.alAllData.add (psp2);\n    this.alAllData.add (psp3);\n\n    this.llAllData.add (psp1);\n    this.llAllData.add (psp2);\n    this.llAllData.add (psp3);\n\n    this.hsAllData.add (psp1);\n    this.hsAllData.add (psp2);\n    this.hsAllData.add (psp3);\n\n    this.tsAllData.add (psp1);\n    this.tsAllData.add (psp2);\n    this.tsAllData.add (psp3);\n\n    this.slAllData.add (psp1);\n    this.slAllData.add (psp2);\n    this.slAllData.add (psp3);\n\n    this.alOneData.add (psp1);\n    this.alOneData.add (psp2);\n    this.alOneData.add (psp3);\n\n    this.llOneData.add (psp1);\n    this.llOneData.add (psp2);\n    this.llOneData.add (psp3);\n\n    this.hsOneData.add (psp1);\n    this.hsOneData.add (psp2);\n    this.hsOneData.add (psp3);\n\n    this.tsOneData.add (psp1);\n    this.tsOneData.add (psp2);\n    this.tsOneData.add (psp3);\n\n    this.slOneData.add (psp1);\n    this.slOneData.add (psp2);\n    this.slOneData.add (psp3);\n\n    this.hsMapData.put (psp1.getSku(), psp1.getName());\n    this.hsMapData.put (psp2.getSku(), psp2.getName());\n    this.hsMapData.put (psp3.getSku(), psp3.getName());\n\n    this.tsMapData.put (psp1.getSku(), psp1.getName());\n    this.tsMapData.put (psp2.getSku(), psp2.getName());\n    this.tsMapData.put (psp3.getSku(), psp3.getName());\n\n    this.slMapData.put (psp1.getSku(), psp1.getName());\n    this.slMapData.put (psp2.getSku(), psp2.getName());\n    this.slMapData.put (psp3.getSku(), psp3.getName());\n  }\n\n  ngOnInit() {\n  }\n\n  ArrayList() {\n    this.active = \"ArrayList\";\n  }\n  LinkedList() {\n    this.active = \"LinkedList\";\n  }\n  HashSet() {\n    this.active = \"HashSet\";\n  }\n  TreeSet() {\n    this.active = \"TreeSet\";\n  }\n  SkipListSet() {\n    this.active = \"SkipListSet\";\n  }\n  ArrayListAllFields() {\n    this.active = \"ArrayListAllFields\";\n  }\n  LinkedListAllFields() {\n    this.active = \"LinkedListAllFields\";\n  }\n  HashSetAllFields() {\n    this.active = \"HashSetAllFields\";\n  }\n  TreeSetAllFields() {\n    this.active = \"TreeSetAllFields\";\n  }\n  SkipListSetAllFields() {\n    this.active = \"SkipListSetAllFields\";\n  }\n  ArrayListOneField() {\n    this.active = \"ArrayListOneField\";\n  }\n  LinkedListOneField() {\n    this.active = \"LinkedListOneField\";\n  }\n  HashSetOneField() {\n    this.active = \"HashSetOneField\";\n  }\n  TreeSetOneField() {\n    this.active = \"TreeSetOneField\";\n  }\n  SkipListSetOneField() {\n    this.active = \"SkipListSetOneField\";\n  }\n  HashMap() {\n    this.active = \"HashMap\";\n  }\n  TreeMap() {\n    this.active = \"TreeMap\";\n  }\n  SkipListMap() {\n    this.active = \"SkipListMap\";\n  }\n\n  addArrayList(newdata:string) {\n    this.alData.add (newdata);\n  }\n  addLinkedList(newdata:string) {\n    this.llData.add (newdata);\n  }\n  addHashSet(newdata:string) {\n    this.hsData.add (newdata);\n  }\n  addTreeSet(newdata:string) {\n    this.tsData.add (newdata);\n  }\n  addSkipListSet(newdata:string) {\n    this.slData.add (newdata);\n  }\n  addArrayListAll(newsku:string, newvalue:string) {\n    let psp:PetStoreProduct = new PetStoreProduct(newsku, newvalue);\n    this.alAllData.add (psp);\n  }\n  addLinkedListAll(newsku:string, newvalue:string) {\n    let psp:PetStoreProduct = new PetStoreProduct(newsku, newvalue);\n    this.llAllData.add (psp);\n  }\n  addHashSetAll(newsku:string, newvalue:string) {\n    let psp:PetStoreProduct = new PetStoreProduct(newsku, newvalue);\n    this.hsAllData.add (psp);\n  }\n  addTreeSetAll(newsku:string, newvalue:string) {\n    let psp:PetStoreProduct = new PetStoreProduct(newsku, newvalue);\n    this.tsAllData.add (psp);\n  }\n  addSkipListSetAll(newsku:string, newvalue:string) {\n    let psp:PetStoreProduct = new PetStoreProduct(newsku, newvalue);\n    this.slAllData.add (psp);\n  }\n  addArrayListOne(newsku:string, newvalue:string) {\n    let psp:PetStoreProduct = new PetStoreProduct(newsku, newvalue);\n    this.alOneData.add (psp);\n  }\n  addLinkedListOne(newsku:string, newvalue:string) {\n    let psp:PetStoreProduct = new PetStoreProduct(newsku, newvalue);\n    this.llOneData.add (psp);\n  }\n  addHashSetOne(newsku:string, newvalue:string) {\n    let psp:PetStoreProduct = new PetStoreProduct(newsku, newvalue);\n    this.hsOneData.add (psp);\n  }\n  addTreeSetOne(newsku:string, newvalue:string) {\n    let psp:PetStoreProduct = new PetStoreProduct(newsku, newvalue);\n    this.tsOneData.add (psp);\n  }\n  addSkipListSetOne(newsku:string, newvalue:string) {\n    let psp:PetStoreProduct = new PetStoreProduct(newsku, newvalue);\n    this.slOneData.add (psp);\n  }\n  putHashMap(newsku:string, newvalue:string) {\n    this.hsMapData.put (newsku, newvalue);\n  }\n  putTreeMap(newsku:string, newvalue:string) {\n    this.tsMapData.put (newsku, newvalue);\n  }\n  putSkipListMap(newsku:string, newvalue:string) {\n    this.slMapData.put (newsku, newvalue);\n  }\n  removeArrayListEntry(olddata:string) {\n    this.alData.remove(olddata);\n  }\n  removeLinkedListEntry(olddata:string) {\n    this.llData.remove(olddata);\n  }\n  removeHashSetEntry(olddata:string) {\n    this.hsData.remove(olddata);\n  }\n  removeTreeSetEntry(olddata:string) {\n    this.tsData.remove(olddata);\n  }\n  removeSkipListSetEntry(olddata:string) {\n    this.slData.remove(olddata);\n  }\n  removeArrayListAllEntry(oldpsp:PetStoreProduct) {\n    this.alAllData.remove(oldpsp);\n  }\n  removeLinkedListAllEntry(oldpsp:PetStoreProduct) {\n    this.llAllData.remove(oldpsp);\n  }\n  removeHashSetAllEntry(oldpsp:PetStoreProduct) {\n    this.hsAllData.remove(oldpsp);\n  }\n  removeTreeSetAllEntry(oldpsp:PetStoreProduct) {\n    this.tsAllData.remove(oldpsp);\n  }\n  removeSkipListSetAllEntry(oldpsp:PetStoreProduct) {\n    this.slAllData.remove(oldpsp);\n  }\n  removeArrayListOneEntry(oldpsp:PetStoreProduct) {\n    this.alOneData.remove(oldpsp);\n  }\n  removeLinkedListOneEntry(oldpsp:PetStoreProduct) {\n    this.llOneData.remove(oldpsp);\n  }\n  removeHashSetOneEntry(oldpsp:PetStoreProduct) {\n    this.hsOneData.remove(oldpsp);\n  }\n  removeTreeSetOneEntry(oldpsp:PetStoreProduct) {\n    this.tsOneData.remove(oldpsp);\n  }\n  removeSkipListSetOneEntry(oldpsp:PetStoreProduct) {\n    this.slOneData.remove(oldpsp);\n  }\n  removeHashMapEntry(oldsku:string) {\n    this.hsMapData.remove(oldsku);\n  }\n  removeTreeMapEntry(oldsku:string) {\n    this.tsMapData.remove(oldsku);\n  }\n  removeSkipListMapEntry(oldsku:string) {\n    this.slMapData.remove(oldsku);\n  }\n}\n\nexport class PetStoreProductSkuCollectable implements Collectable<PetStoreProduct> {\n  equals (instance1 : PetStoreProduct, instance2 : PetStoreProduct) : boolean {\n    if (instance1 === undefined) {\n      if (instance2 === undefined) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    if (instance1 === null) {\n      if (instance2 === null) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    if ((instance2 === null) || (instance2 === undefined)) {\n      return false;\n    }\n\n    if (instance1.getSku() === instance2.getSku()) {  // what we're really comparing here\n      return true;\n    }\n\n    return false;\n  }\n}\n\nexport class PetStoreProductSkuHashable implements Hashable<PetStoreProduct> {\n  equals (instance1 : PetStoreProduct, instance2 : PetStoreProduct) : boolean {\n    if (instance1 === undefined) {\n      if (instance2 === undefined) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    if (instance1 === null) {\n      if (instance2 === null) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    if ((instance2 === null) || (instance2 === undefined)) {\n      return false;\n    }\n\n    if (instance1.getSku() === instance2.getSku()) {  // what we're really comparing here\n      return true;\n    }\n\n    return false;\n  };\n  hashCode (o:PetStoreProduct) : number {\n    if (o === undefined) {\n      return 0;\n    }\n    if (o === null) {\n      return 0;\n    }\n    return Collections.getHashCodeForString(o.getSku());\n  };\n}\n\nexport class PetStoreProductAllFieldsComparator implements Comparator<PetStoreProduct> {\n  compare(o1:PetStoreProduct, o2:PetStoreProduct) : number {\n    if (o1 === o2)\n      return 0;\n    if (o1 === undefined)\n      return -1;\n    if (o1 === null)\n      return -1;\n    if (o2 === undefined)\n      return 1;\n    if (o2 === null)\n      return 1;\n    if (o1.getSku() < o2.getSku())\n      return -1;\n    if (o1.getSku() > o2.getSku())\n      return 1;\n    if (o1.getName() < o2.getName())\n      return -1;\n    return 1;\n  }\n}\n\nexport class PetStoreProductSkuComparator implements Comparator<PetStoreProduct> {\n  compare(o1:PetStoreProduct, o2:PetStoreProduct) : number {\n    if (o1 === o2)\n      return 0;\n    if (o1 === undefined)\n      return -1;\n    if (o1 === null)\n      return -1;\n    if (o2 === undefined)\n      return 1;\n    if (o2 === null)\n      return 1;\n    if (o1.getSku() < o2.getSku())\n      return -1;\n    return 1;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// /Volumes/USBRAID/git/typescriptcollectionsframework-Demo-For-Angular5/src/app/app.component.ts","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpModule } from '@angular/http';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n\n// WEBPACK FOOTER //\n// /Volumes/USBRAID/git/typescriptcollectionsframework-Demo-For-Angular5/src/app/app.module.ts","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n\n\n\n// WEBPACK FOOTER //\n// /Volumes/USBRAID/git/typescriptcollectionsframework-Demo-For-Angular5/src/environments/environment.ts","import './polyfills.ts';\n\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { enableProdMode } from '@angular/core';\nimport { environment } from './environments/environment';\nimport { AppModule } from './app/app.module';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n\n\n// WEBPACK FOOTER //\n// /Volumes/USBRAID/git/typescriptcollectionsframework-Demo-For-Angular5/src/main.ts","// This file includes polyfills needed by Angular and is loaded before\n// the app. You can add your own extra polyfills to this file.\nimport 'core-js/es6/symbol';\nimport 'core-js/es6/object';\nimport 'core-js/es6/function';\nimport 'core-js/es6/parse-int';\nimport 'core-js/es6/parse-float';\nimport 'core-js/es6/number';\nimport 'core-js/es6/math';\nimport 'core-js/es6/string';\nimport 'core-js/es6/date';\nimport 'core-js/es6/array';\nimport 'core-js/es6/regexp';\nimport 'core-js/es6/map';\nimport 'core-js/es6/set';\nimport 'core-js/es6/reflect';\n\nimport 'core-js/es7/reflect';\nimport 'zone.js/dist/zone';\n\n\n\n// WEBPACK FOOTER //\n// /Volumes/USBRAID/git/typescriptcollectionsframework-Demo-For-Angular5/src/polyfills.ts"],"sourceRoot":"webpack:///"}